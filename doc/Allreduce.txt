* INTRO SUI TEMPI
    - Tempo per mandare un mex tra due nodi = α + nβ
    - α = latenza (startup time), indipendende dalla size
    - β = tempo di trasferimento per byte
    - n = numero di bytes trasferiti
    - γ = costo computazionale per byte per operazioni di riduzione locale in un processo
    - α + nβ per comunicazione bidirezionale
    - αuni + nβuni per comunicazione unilaterale
    - fα = αuni/α
    - fβ = βuni/β
    - questi ratio di solito sono tra 0.5 e 1.0

* FROM NOT POWER OF TWO TO POWER OF TWO
    - Se numero di processi p % 2 != 0 riduciamo alla potenza di due più vicina per difetto
    - p' = 2 ^ lg p 
    - rimuoviamo r processi r = p - p'
    - Nei primi 2r processi i nodi mandano:
        - se pari la seconda metà del loro array a rank+1
        - se dispari la prima metà del loro array a rank-1
        - se pari riduzione della prima metà dell'array
        - se dispari riduzione della seconda metà dell'array
        - i rank dispari mandano il risultato a rank-1
    - ora i rank pari dei primi 2r processi contengono la riduzione finale
    - gli altri r rank dispari non partecipano al resto della computazione
    - i primi r rank pari e i restanti processi p-2r vengono rinominati da 0 a p'-1 con p' % 2 == 0
    - costo: (1 + fα)α + n/2 (1 +fβ)β + n/2 γ

1. Binomial Tree to Rank 0 + Binomial Tree Broadcast 
    - Buono per messaggi corti xk lavora in lgN passi
    - Costo: lgp (α + nβ + nγ)
2. Recursive Doubling
    - Buono per messaggi corti o lunghi con operazioni definite dall'utente 
    - Costo: lg p α + n lg p β + n lg p γ
3. Reduce-Scatter + Allgather [Recursive Halving and Doubling]
    - Buono per messaggi lunghi con operazioni predefinite
    - Costo: 2 lgp α + 2 p−1/p nβ + p−1/p nγ

if operazioni predefinite:
    if mex corti:
        - Binomial Tree
    else: 
        - Reduce-Scatter + Allgather
else: 
    - Recursive Doubling

1. Reduce-Scatter + Allgather [Recursive Halving and Doubling]
    - Buono per messaggi lunghi e p % 2 == 0
    - Costo: 2 lgp α + 2nβ + nγ [if power of 2]
    - (3 + 2[lgp]) α + 4nβ + 3/2 nγ [else]
    - se !power of 2 trasferimento dati duplicato e overhead computazionale 3/2
2. Binary Blocks
    - riduce sbilanciamento del precedente if !power of 2
    - dividi i processi in blocchi con un power of 2 numero di processi
    - ogni blocco esegue internamente la reduce-scatter
    - partendo dal blocco più piccolo dividiamo il risultato intermedio ai segmenti
        del risultato intermedio del blocco maggiore più vicino 
    - quel blocco farà poi la riduzione sul segmento
    - limita overhead, al ratio tra due blocchi conseguitivi
    - δexpo,max = massima differenza tra due blocchi nella rappresentazione
        binaria del numero di processi
    - es: 100 = 2^6 + 2^5 + 2^2 -> δexpo,max = max(6-5, 5-2) = 3
    - algoritmo performa bene se δexpo,max è un valore basso
    - se p è power of 2 equivale a usare il precedente algoritmo
3. Ring
    - pairwise-exchange per la reduce-scatter
        - p-1 passi 
        - al passo i ogni processo send a rank+i recv da rank-i e fa riduzione locale
        - dati scambiati sono solo quelli necessari per scatterare il risultato (n/p)
        - costo: (p−1)α + (p-1)/p nβ + (p-1)/p nγ
    - ring allgather [per allreduce]
        - costo: 2(p − 1)α + 2nβ + nγ - 1/p (2nβ + nγ) 
    - processi mandano il loro segmento alla root [per la reduce]
        - costo: (p−1)(α+αuni) + n(β+βuni) + nγ - 1/p (n(β+βuni)+nγ)
    - buono per la bandwidth quando p !power of 2, ma latenza scala lineare
    - da usare <-> p è medio/piccolo or vettore molto grande

* Reduce-Scatter [Recursive Vector Halving and Distance Doubling]
    - i rank pari mandano la seconda metà del loro array a rank+1
    - i rank dispari mandano la prima metà del loro array a rank-1
    - tutti i processi fanno riduzione tra dati che anno e quelli ricevuti
    - si continua per lg p' - 1 passi dimezzando gli array e raddoppiando la distanza 
    - alla fine ognuno dei p' processi ha 1/p' del totale del risultato della riduzione
    - costo: lg p' α + ( (p' - 1) / p') (nβ +nγ)

* Gather [Binomial-Tree Gather] {Reduce}
    - binomial tree gather using vector doublin and distance halving 
    - costo: lg p' αuni + (p1−1)/p1 nβuni
    - se root è un nodo rimosso all'inizio scambio il ruolo con il partner
    - no extra overhead

* Allgather [Recursive Vector Doubling and Distance Halving] {Allreduce}
    - i processi si scambiano 1/p' dati e hanno così 2/p' del risultato
    - poi scambiano 2/p' e avranno 4/p' del risultato e continuano così
    - dopo lg p' passi tutti i p' processi avranno il risultato finale
    - costo: lg p' α + ( (p' - 1) / p') nβ
    - se p != p' bisogna mandare il risultato ai r processi rimossi
    - overhead di αuni + nβuni

Più usati:
    - Vector Halving and Distance Doubling
        - Nella prima fase (reduce-scatter) ogni nodo ha dati univoci
    - Ring [pairwise-exchange + ring allgather]
        - Problemi nella prima fase (reduce-scatter) ogni nodo ha dati univoci
        - Nella secondo fase dalla fine della prima iterazione in poi abbiamo 
            ridondanza, più nodi avranno gli stessi dati
    - Binomial Tree [Reduce + Broadcast]
        - Dipende chi fallisce
        - Se nodo che fallisce deve ancora inviare/ricevere i dati abbiamo un problema
    - Recursive Doubling
        - Dal primo passo in poi abbiamo ridondanza, più nodi hanno stessi dati

* Problemi Nella fase di Reduce-Scatter:
    - Vector Halving
    - Pairwise-exchange